# a)
# Convert chess board position, like "A1", to a 2D point, like [1, 1].
pos-to-point: (pos :Str -> :Arr) {
    pos lower-case pos!
    pos str->chars pos!
    pos 0 get m!
    pos 1 get x!

    pos 1 x 48 - set pos!
    pos 0 m 96 - set pos!

    pos
} fun

test-pos-to-point: {
    "a1" pos-to-point [1 1] test=
    "A1" pos-to-point [1 1] test=
    "H8" pos-to-point [8 8] test=
    "B6" pos-to-point [2 6] test=
    # a) further examples
} fun

 test-pos-to-point

# b)
# Check whether p is a valid chess board position of the Form "[0 2]".
point-valid: (p :Arr -> :Bool) {

    p 0 get x!
    p 1 get y!


    #x 0 > x 8 <= and {y 0 > y 8 <= and{true}{false}if}{false}if

    x 0 > x 8 <= and{true o!}{false o!}if

    y 0 > y 8 <= and{true v!}{false v!}if

    v o and i!

    i


} fun

test-point-valid: {
    [1 1] point-valid true test=
    [8 8] point-valid true test=
    [8 9] point-valid false test=
    [9 8] point-valid false test=
    [2 0] point-valid false test=
    # b) weiterer Testfall
} fun

test-point-valid

# c)
# Convert 2D point of the form [1, 1] to a chess board position of the form "A1".
point-to-pos: (a :Arr -> :Str) {
    a 0 a 0 get 64 + set a!
    a 1 a 1 get 48 + set a!

    a chars->str a!

    a
    #a 0 get x!
    #x 64 + x!

    #a 1 get y!
    #y 48 + y!

    #a 0 x set a!
    #a 1 y set a!

    #a chars->str a!

    #a




    
} fun

test-point-to-pos: {
    [1 1] point-to-pos "A1" test=
    [2 2] point-to-pos "B2" test=
    [4 2] point-to-pos "D2" test=
    # c) further examples
} fun

test-point-to-pos

# d)
# Computes the possible next positions of the knight (Springer) given its current position.
knight-next-positions: (p :Str -> :Arr) {
    p pos-to-point p!
    p .0 px!
    p .1 py!
    # create all possible positions (some of which may not be on the board)
    [ 
        [px 1 +  py 2 +] 
        [px 2 +  py 1 +] 
        [px 1 +  py 2 -] 
        [px 2 +  py 1 -] 
        [px 1 -  py 2 +] 
        [px 2 -  py 1 +] 
        [px 1 -  py 2 -] 
        [px 2 -  py 1 -] 
    ] a!
    # remove invalid positions (the ones not on the board)
    [a { dup point-valid not {pop} {point-to-pos} if } for] sort
} fun

test-knight-next-positions: {
    "A1" knight-next-positions ["B3", "C2"] test=
    "H8" knight-next-positions ["F7", "G6"] test=
    "H8" knight-next-positions ["F7", "G6"] test=
} fun

test-knight-next-positions

test-stats